// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now()) @db.Timestamptz
  updatedAt     DateTime @default(now()) @db.Timestamptz

  // Relations
  sessions      Session[]
  accounts      Account[]
  verifications Verification[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime @db.Timestamptz
  token     String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz
  ipAddress String?
  userAgent String?
  userId    String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamptz
  refreshTokenExpiresAt DateTime? @db.Timestamptz
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @db.Timestamptz
  updatedAt             DateTime  @default(now()) @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @db.Timestamptz
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @default(now()) @db.Timestamptz
  userId     String?

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  role          Role     @default(USER)
  banned        Boolean  @default(false)
  banReason     String?
  createdAt     DateTime @default(now()) @db.Timestamptz
  updatedAt     DateTime @default(now()) @db.Timestamptz @updatedAt

  // Relations
  sessions       Session[]
  accounts       Account[]
  rewardServices UserRewardService[]
  calculations   RewardCalculation[]

  banExpires DateTime?

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime @db.Timestamptz
  token     String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz
  ipAddress String?
  userAgent String?
  userId    String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamptz
  refreshTokenExpiresAt DateTime? @db.Timestamptz
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @db.Timestamptz
  updatedAt             DateTime  @default(now()) @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @db.Timestamptz
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @default(now()) @db.Timestamptz @updatedAt

  @@map("verification")
}

// Reward Services Models

model RewardService {
  id             String   @id @default(cuid())
  name           String
  description    String
  formula        String
  formulaDisplay String
  exampleAmount  Float
  exampleReward  Float
  exampleQuota   Float
  isActive       Boolean  @default(true)
  metadata       Json?
  createdAt      DateTime @default(now()) @db.Timestamptz
  updatedAt      DateTime @default(now()) @db.Timestamptz @updatedAt

  // Relations
  userServices UserRewardService[]
  calculations RewardCalculation[]

  @@map("reward_service")
}

model UserRewardService {
  id             String    @id @default(cuid())
  userId         String
  serviceId      String
  totalInvested  Float     @default(0.0)
  totalRewards   Float     @default(0.0)
  totalQuota     Float     @default(0.0)
  calculations   Int       @default(0)
  lastCalculated DateTime? @db.Timestamptz
  createdAt      DateTime  @default(now()) @db.Timestamptz
  updatedAt      DateTime  @default(now()) @db.Timestamptz @updatedAt

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  service            RewardService       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  rewardCalculations RewardCalculation[]

  @@unique([userId, serviceId])
  @@map("user_reward_service")
}

model RewardCalculation {
  id            String   @id @default(cuid())
  userId        String
  serviceId     String
  userServiceId String
  amount        Float
  reward        Float
  quota         Float
  formula       String
  metadata      Json?
  createdAt     DateTime @default(now()) @db.Timestamptz

  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  service     RewardService     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  userService UserRewardService @relation(fields: [userServiceId], references: [id], onDelete: Cascade)

  @@map("reward_calculation")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String                 @id @default(cuid())
  name                               String?
  email                              String                 @unique
  emailVerified                      Boolean                @default(false)
  image                              String?
  createdAt                          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                          DateTime               @default(now()) @updatedAt @db.Timestamptz(6)
  banExpires                         DateTime?              @db.Timestamptz(6)
  banReason                          String?
  banned                             Boolean                @default(false)
  role                               Role                   @default(USER)
  referredBy                         String?
  referralCode                       String?                @unique
  successfulReferrals                Int                    @default(0)
  totalReferralEarnings              Float                  @default(0.0)
  payment                            Payment[]
  referralCodeObj                    ReferralCode?
  referralPayout                     ReferralPayout[]
  referralRelationshipAsReferredUser ReferralRelationship?  @relation("referralRelationshipAsReferredUser")
  referralRelationshipAsReferrer     ReferralRelationship[] @relation("referralRelationshipAsReferrer")
  rewardCalculation                  RewardCalculation[]
  transaction                        Transaction[]
  userRewardService                  UserRewardService[]
  wallet                             Wallet?
  withdrawalMethod                   WithdrawalMethod[]
  withdrawalRequest                  WithdrawalRequest[]
  accounts                           Account[]
  sessions                           Session[]
  verifications                     Verification[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime @db.Timestamptz(6)
  token          String   @unique
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamptz(6)
  refreshTokenExpiresAt DateTime? @db.Timestamptz(6)
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification")
}

model AdminSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model ContactSettings {
  id              String           @id @default(cuid())
  contactMethod   ContactMethod    @default(TELEGRAM)
  url             String?          @default("https://t.me/mintward_support")
  appUrl          String?          @default("tg://resolve?domain=mintward_support")
  contactValue    String?          
  buttonText      String           @default("Help & Support")
  buttonColor     String           @default("primary")
  buttonSize      ButtonSize       @default(MEDIUM)
  positionBottom  String           @default("bottom-24")
  positionRight   String           @default("right-4")
  positionBottomMd String           @default("bottom-20")
  positionRightMd String           @default("right-6")
  iconName        String           @default("Headset")
  isEnabled       Boolean          @default(true)
  openInNewTab    Boolean          @default(true)
  customStyles    Json?
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
}

model Payment {
  id              String         @id @default(cuid())
  userId          String
  amount          Float
  currency        String         @default("INR")
  status          PaymentStatus  @default(PENDING)
  provider        String         @default("KUKUPAY")
  providerOrderId String?        @unique
  paymentUrl      String?
  phone           String?
  webhookReceived Boolean        @default(false)
  metadata        Json?
  createdAt       DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  completedAt     DateTime?      @db.Timestamptz(6)
  rewardServiceId String?
  rewardService   RewardService? @relation(fields: [rewardServiceId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Payment_userId_fkey")
  wallet          Wallet         @relation(fields: [userId], references: [userId], map: "Payment_wallet_userId_fkey")
}

model ReferralCode {
  id                   String                 @id @default(cuid())
  userId               String                 @unique
  code                 String                 @unique
  isActive             Boolean                @default(true)
  expiresAt            DateTime?              @db.Timestamptz(6)
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @default(now()) @updatedAt @db.Timestamptz(6)
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralRelationship ReferralRelationship[]
}

model ReferralPayout {
  id                   String               @id @default(cuid())
  referralId           String
  userId               String
  amount               Float
  currency             String               @default("INR")
  type                 PayoutType           @default(REFERRER_REWARD)
  status               PayoutStatus         @default(PENDING)
  transactionId        String?              @unique
  metadata             Json?
  createdAt            DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  processedAt          DateTime?            @db.Timestamptz(6)
  referralRelationship ReferralRelationship @relation(fields: [referralId], references: [id], onDelete: Cascade)
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReferralRelationship {
  id                 String           @id @default(cuid())
  referrerId         String
  referredUserId     String           @unique
  referralCodeId     String
  status             ReferralStatus   @default(PENDING)
  completedAt        DateTime?        @db.Timestamptz(6)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  referralPayout     ReferralPayout[]
  referralCode       ReferralCode     @relation(fields: [referralCodeId], references: [id], onDelete: Cascade)
  userAsReferredUser User             @relation("referralRelationshipAsReferredUser", fields: [referredUserId], references: [id], onDelete: Cascade)
  userAsReferrer     User             @relation("referralRelationshipAsReferrer", fields: [referrerId], references: [id], onDelete: Cascade)
}

model ReferralSettings {
  id                       String     @id @default(cuid())
  isActive                 Boolean    @default(false)
  referrerRewardType       RewardType @default(FLAT)
  referrerRewardAmount     Float      @default(0.0)
  referrerRewardPercentage Float      @default(0.0)
  referredRewardType       RewardType @default(FLAT)
  referredRewardAmount     Float      @default(0.0)
  referredRewardPercentage Float      @default(0.0)
  minimumDepositAmount     Float      @default(300.0)
  referralCodeExpiryDays   Int        @default(30)
  maxReferralsPerUser      Int        @default(-1)
  enableMultiLevel         Boolean    @default(false)
  multiLevelRewards        Json?
  createdAt                DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  referralBaseUrl          String?    @default("https://mintward.com")
}

model RewardCalculation {
  id                String            @id @default(cuid())
  userId            String
  serviceId         String
  userServiceId     String
  amount            Float
  reward            Float
  quota             Float
  formula           String
  metadata          Json?
  createdAt         DateTime          @default(now()) @db.Timestamptz(6)
  rewardService     RewardService     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRewardService UserRewardService @relation(fields: [userServiceId], references: [id], onDelete: Cascade)
}

model RewardService {
  id                String              @id @default(cuid())
  name              String
  description       String
  formula           String
  formulaDisplay    String
  exampleAmount     Float
  exampleReward     Float
  exampleQuota      Float
  isActive          Boolean             @default(true)
  metadata          Json?
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  payment           Payment[]
  rewardCalculation RewardCalculation[]
  userRewardService UserRewardService[]
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  walletId    String
  amount      Float
  currency    String          @default("INR")
  type        TransactionType
  status      String          @default("COMPLETED")
  description String?
  referenceId String?
  metadata    Json?
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model UserRewardService {
  id                String              @id @default(cuid())
  userId            String
  serviceId         String
  totalInvested     Float               @default(0.0)
  totalRewards      Float               @default(0.0)
  totalQuota        Float               @default(0.0)
  calculations      Int                 @default(0)
  lastCalculated    DateTime?           @db.Timestamptz(6)
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  rewardCalculation RewardCalculation[]
  rewardService     RewardService       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
}

model Wallet {
  id          String        @id @default(cuid())
  userId      String        @unique
  balance     Float         @default(0.0)
  currency    String        @default("INR")
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  payment     Payment[]
  transaction Transaction[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WithdrawalMethod {
  id                String               @id @default(cuid())
  userId            String
  type              WithdrawalMethodType
  isDefault         Boolean              @default(false)
  isActive          Boolean              @default(true)
  accountName       String?
  accountNumber     String?
  bankName          String?
  ifscCode          String?
  upiId             String?
  upiName           String?
  phoneNumber       String?
  metadata          Json?
  createdAt         DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalRequest WithdrawalRequest[]
}

model WithdrawalRequest {
  id                 String                  @id @default(cuid())
  userId             String
  withdrawalMethodId String
  amount             Float
  currency           String                  @default("INR")
  status             WithdrawalRequestStatus @default(PENDING)
  adminNotes         String?
  processedBy        String?
  processedAt        DateTime?               @db.Timestamptz(6)
  transactionId      String?
  rejectionReason    String?
  metadata           Json?
  createdAt          DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                @default(now()) @updatedAt @db.Timestamptz(6)
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalMethod   WithdrawalMethod        @relation(fields: [withdrawalMethodId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PROCESSED
  CANCELLED
  FAILED
}

enum PayoutType {
  REFERRER_REWARD
  REFERRED_BONUS
  MULTI_LEVEL_BONUS
}

enum ReferralStatus {
  PENDING
  COMPLETED
  CANCELLED
  EXPIRED
}

enum RewardType {
  FLAT
  PERCENTAGE
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REWARD
  REFERRAL
  REFUND
}

enum WithdrawalMethodType {
  BANK_ACCOUNT
  UPI
}

enum WithdrawalRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
}

enum ContactMethod {
  TELEGRAM
  WHATSAPP
  EMAIL
  PHONE
  CUSTOM
}

enum ButtonSize {
  SMALL
  MEDIUM
  LARGE
}

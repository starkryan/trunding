generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(cuid())
  name                 String?
  email                String              @unique
  emailVerified        Boolean             @default(false)
  image                String?
  createdAt            DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  banExpires           DateTime?
  banReason            String?
  banned               Boolean             @default(false)
  role                 Role                @default(USER)
  referredBy           String?
  referralCode         String?             @unique
  totalReferralEarnings Float              @default(0.0)
  successfulReferrals  Int                 @default(0)
  accounts             Account[]
  payments             Payment[]
  calculations         RewardCalculation[]
  sessions             Session[]
  transactions         Transaction[]
  rewardServices       UserRewardService[]
  wallet               Wallet?
  withdrawalMethods    WithdrawalMethod[]
  withdrawalRequests   WithdrawalRequest[]
  referralCodeObj      ReferralCode?
  referredByRelation   ReferralRelationship? @relation("ReferredUser")
  referrals            ReferralRelationship[] @relation("Referrer")
  referralPayouts      ReferralPayout[]

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime @db.Timestamptz(6)
  token          String   @unique
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @db.Timestamptz(6)
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamptz(6)
  refreshTokenExpiresAt DateTime? @db.Timestamptz(6)
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @db.Timestamptz(6)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("verification")
}

model RewardService {
  id             String              @id @default(cuid())
  name           String
  description    String
  formula        String
  formulaDisplay String
  exampleAmount  Float
  exampleReward  Float
  exampleQuota   Float
  isActive       Boolean             @default(true)
  metadata       Json?
  createdAt      DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  calculations   RewardCalculation[]
  userServices   UserRewardService[]
  payments       Payment[]

  @@map("reward_service")
}

model UserRewardService {
  id                 String              @id @default(cuid())
  userId             String
  serviceId          String
  totalInvested      Float               @default(0.0)
  totalRewards       Float               @default(0.0)
  totalQuota         Float               @default(0.0)
  calculations       Int                 @default(0)
  lastCalculated     DateTime?           @db.Timestamptz(6)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  rewardCalculations RewardCalculation[]
  service            RewardService       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
  @@map("user_reward_service")
}

model RewardCalculation {
  id            String            @id @default(cuid())
  userId        String
  serviceId     String
  userServiceId String
  amount        Float
  reward        Float
  quota         Float
  formula       String
  metadata      Json?
  createdAt     DateTime          @default(now()) @db.Timestamptz(6)
  service       RewardService     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userService   UserRewardService @relation(fields: [userServiceId], references: [id], onDelete: Cascade)

  @@map("reward_calculation")
}

model Wallet {
  id           String        @id @default(cuid())
  userId       String        @unique
  balance      Float         @default(0.0)
  currency     String        @default("INR")
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  payments     Payment[]
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  amount          Float
  currency        String        @default("INR")
  status          PaymentStatus @default(PENDING)
  provider        String        @default("KUKUPAY")
  providerOrderId String?       @unique
  paymentUrl      String?
  phone           String?
  webhookReceived Boolean       @default(false)
  metadata        Json?
  rewardServiceId String?       // Optional: Link to reward service if this is a reward service payment
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  completedAt     DateTime?     @db.Timestamptz(6)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade, map: "payment_user_fkey")
  wallet          Wallet        @relation(fields: [userId], references: [userId], map: "payment_wallet_fkey")
  rewardService   RewardService? @relation(fields: [rewardServiceId], references: [id], onDelete: SetNull)

  @@map("payment")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  walletId    String
  amount      Float
  currency    String          @default("INR")
  type        TransactionType
  status      String          @default("COMPLETED")
  description String?
  referenceId String?
  metadata    Json?
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

model WithdrawalMethod {
  id                 String               @id @default(cuid())
  userId             String
  type               WithdrawalMethodType
  isDefault          Boolean              @default(false)
  isActive           Boolean              @default(true)
  accountName        String?
  accountNumber      String?
  bankName           String?
  ifscCode           String?
  upiId              String?
  upiName            String?
  phoneNumber        String?
  metadata           Json?
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalRequests WithdrawalRequest[]

  @@map("withdrawal_method")
}

model WithdrawalRequest {
  id                 String                  @id @default(cuid())
  userId             String
  withdrawalMethodId String
  amount             Float
  currency           String                  @default("INR")
  status             WithdrawalRequestStatus @default(PENDING)
  adminNotes         String?
  processedBy        String?
  processedAt        DateTime?               @db.Timestamptz(6)
  transactionId      String?
  rejectionReason    String?
  metadata           Json?
  createdAt          DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                @default(now()) @updatedAt @db.Timestamptz(6)
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalMethod   WithdrawalMethod        @relation(fields: [withdrawalMethodId], references: [id])

  @@map("withdrawal_request")
}

model ReferralSettings {
  id                        String   @id @default(cuid())
  isActive                  Boolean  @default(false)
  referrerRewardType        RewardType @default(FLAT)
  referrerRewardAmount      Float    @default(0.0)
  referrerRewardPercentage  Float    @default(0.0)
  referredRewardType        RewardType @default(FLAT)
  referredRewardAmount      Float    @default(0.0)
  referredRewardPercentage  Float    @default(0.0)
  minimumDepositAmount      Float    @default(300.0)
  referralCodeExpiryDays    Int      @default(30)
  maxReferralsPerUser       Int      @default(-1) // -1 for unlimited
  enableMultiLevel          Boolean  @default(false)
  multiLevelRewards         Json?    // Store tier-wise reward configuration
  referralBaseUrl           String?  @default("https://montra.in") // Base URL for referral links
  createdAt                 DateTime @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("referral_settings")
}

model ReferralCode {
  id          String   @id @default(cuid())
  userId      String   @unique
  code        String   @unique
  isActive    Boolean  @default(true)
  expiresAt   DateTime? @db.Timestamptz(6)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  relationships ReferralRelationship[]

  @@map("referral_code")
}

model ReferralRelationship {
  id               String              @id @default(cuid())
  referrerId       String
  referredUserId   String              @unique
  referralCodeId   String
  status           ReferralStatus      @default(PENDING)
  completedAt      DateTime?           @db.Timestamptz(6)
  createdAt        DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  referrer         User                @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referredUser     User                @relation("ReferredUser", fields: [referredUserId], references: [id], onDelete: Cascade)
  referralCode     ReferralCode        @relation(fields: [referralCodeId], references: [id], onDelete: Cascade)
  payouts          ReferralPayout[]

  @@map("referral_relationship")
}

model ReferralPayout {
  id                 String              @id @default(cuid())
  referralId         String
  userId             String              // Who receives this payout (referrer or referred)
  amount             Float
  currency           String              @default("INR")
  type               PayoutType          @default(REFERRER_REWARD)
  status             PayoutStatus        @default(PENDING)
  transactionId      String?             @unique // Link to wallet transaction
  metadata           Json?
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  processedAt        DateTime?           @db.Timestamptz(6)
  referral           ReferralRelationship @relation(fields: [referralId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("referral_payout")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REWARD
  REFERRAL
  REFUND
}

enum WithdrawalMethodType {
  BANK_ACCOUNT
  UPI
}

enum WithdrawalRequestStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  FAILED
}

enum RewardType {
  FLAT
  PERCENTAGE
}

enum ReferralStatus {
  PENDING
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PayoutType {
  REFERRER_REWARD
  REFERRED_BONUS
  MULTI_LEVEL_BONUS
}

enum PayoutStatus {
  PENDING
  PROCESSED
  CANCELLED
  FAILED
}
